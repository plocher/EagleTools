"""

eagle2gerbers

    Create an Eagle Schematic and Board (.sch and .brd files) for a design, then
    Run this tool to generate Gerber files, images and part placement files for your design.

    This job will generate the following files:

    * excellon drill data, top and bottom copper, silk and soldermask, top solderpaste and
      a board outline in Gerber 274x format files.  These files will have names ending in
          "TXT" "GTL" "GTS" "GTP" "GBP" "GTO" "GBL" "GBS" "GBO" and "GML".

    * Board images in .svg and .png forms, of the board's front and back, with and without
      silkscreen.

    * Fabreication support files

    Once the files have been generated, run this script in the Eagle project directory to
    collect all the gerber files generated by the CAM processor together into a compressed tar
    or zip file for submission to a board fab house such as BatchPCB or Seeed Studios.

    The script archives the files along with a copy of the schematic and board files so
    that you can go back and reproduce historical versions if needed.

    Finally, it copies the gerber files (.tar or .zip) into an "order collection" directory,
    usually in your home directory, so you can easily find all the boards that need to be ordered
    next time you place a fab order.
"""

from fab.SiteConfiguration import *

import os
import os.path
import argparse
import datetime
from zipfile import ZipFile
import tarfile
import shutil


#
# It also creates a  and a *.bom file to describe what it does


PARTS_BOARD = 'run generate_mediawiki_partlist; RUN PartList'
PARTS_SCH   = 'EXPORT partlist {}'
GENGERBER   = '{EAGLEAPP} -X- -X+ -dGERBER_RS274X'.format(EAGLEAPP=EAGLEAPP)
GENDRILLS   = '{EAGLEAPP} -X- -X+ -dEXCELLON_24'.format(EAGLEAPP=EAGLEAPP)


ARCHIVEDIR  = 'Archive'
ALINK       = 'Current'


"""
Ensure file naming patterns are consistent by generating them in one place

#  gerber files contain data for:
#
#  Gerber Top Layer (copper layer):             *.GTL
#  Gerber Top Overlay (silkscreen layer):       *.GTO
#  Gerber Top Soldermask (soldermask layer):    *.GTS
#  Gerber Bottom Layer (copper layer):          *.GBL
#  Gerber Bottom Overlay (silkscreen layer):    *.GBO
#  Gerber Bottom Soldermask (soldermask layer): *.GBS
#  Gerber Milling Layer:                        *.GML
#  Gerber Top solderPaste (smt solder layer):   *.GTP
# and
#  Excellon Drill File:                         *.TXT

"""
def genGerberFilenameList(project):
    FileList = {}
    FileList['GTL'] = "{}.GTL".format(project)
    FileList['GTS'] = "{}.GTS".format(project)
    FileList['GTP'] = "{}.GTP".format(project)
    FileList['GTO'] = "{}.GTO".format(project)

    FileList['GML'] = "{}.GML".format(project)

    FileList['GBO'] = "{}.GBO".format(project)
    FileList['GBP'] = "{}.GBP".format(project)
    FileList['GBS'] = "{}.GBS".format(project)
    FileList['GBL'] = "{}.GBL".format(project)

    FileList['TXT'] = "{}.TXT".format(project)
    return FileList

def genEagleFilenameList(args):
    FileList = {}
    FileList['board']      = "{}.brd"        .format(args.project)
    FileList['boardArray'] = "{}_array.brd"  .format(args.project)
    FileList['schematic']  = "{}.sch"        .format(args.project)
    return FileList

def genArchivesFileList(args):
    FileList = {}
    FileList['tefn']       = '{}.eagle.tar'  .format(args.project)
    FileList['zefn']       = '{}.eagle.zip'  .format(args.project)
    FileList['tgfn']       = '{}.gerbers.tar'.format(args.project)
    FileList['zgfn']       = '{}.gerbers.zip'.format(args.project)
    return FileList


def genPickNPlaceList(args):
    FileList = {}
    # pick-n-place control file (*.DPV)
    FileList['dpv']        = "{}.dpv"        .format(args.project)

    return FileList


def genDerivedFileList(args):
    FileList = {}

    # Info file / Bill Of Materials
    FileList['bom']        = "{}.bom"        .format(args.project)
    # Board Image (experimental)
    FileList['svg']        = "{}.svg"        .format(args.project)

    FileList['partsfile']  = "{}.parts.txt"  .format(args.project)
    FileList['pngsch']     = "{}.sch.png"    .format(args.project)
    FileList['pngbrd']     = "{}.brd.png"    .format(args.project)
    FileList['pngbot']     = "{}.bot.brd.png".format(args.project)
    FileList['pngtop']     = "{}.top.brd.png".format(args.project)

    return FileList

def genBoardFilenameList(args):
    FileList = {}
    for n, f in genEagleFilenameList(args).iteritems():
        FileList[n] = f
    for n, f in genDerivedFileList(args).iteritems():
        FileList[n] = f
    for n, f in genArchivesFileList(args).iteritems():
        FileList[n] = f
    if args.picknplace:
        for n, f in genPickNPlaceList(args).iteritems():
            FileList[n] = f
    return FileList

def getCADtime(schematic, board):
    base_time = None
    if board is not None and os.path.isfile(board):
        base_time = os.stat(board).st_mtime  # time of most recent content modification

    if schematic is not None and os.path.isfile(schematic):
        s_modified_time = os.stat(schematic).st_mtime
        if base_time is None or s_modified_time > base_time:
            base_time = s_modified_time

    return base_time

"""
Generate a zip or tar file of the gerbers
"""
def generateGerbersFromEagle(args):
    def callCommand(args, file, board, command, layers):
        command = "{COMMAND} -o{out} {board} {layers}" .format(COMMAND=command,
                                                                out=file,
                                                                board=board,
                                                                layers=layers)
        if args.verbose:
            print('% {}'.format(command))
        os.system(command)


    blist = genBoardFilenameList(args)

    board      = blist['board']
    boardArray = blist['boardArray']
    schematic  = blist['schematic']
    tefn       = blist['tefn']
    zefn       = blist['zefn']
    tgfn       = blist['tgfn']
    zgfn       = blist['zgfn']


    if not os.path.isfile(board):
        if not os.path.isfile(boardArray):
            raise Exception('# ERROR: Can not create gerbers without a brd file ({} or {})...'.format(board, boardArray))

    modified  = False
    for b in [board, boardArray]:
        if not os.path.isfile(b):
            continue

        needed = False

        if args.force:
            needed = True
            if args.verbose:
                print "** FORCE regeneration of gerbers for {}\n".format(args.project)

        if not needed:
            base_time = getCADtime(schematic, b)

            """
            base_time is the CAD file set's last mod time.
            
            If Archive/Current/... is older than .sch/.brd, or not there, needed!
     
            """
            foundarchive = False
            for d in [ '.', os.path.join(ARCHIVEDIR, ALINK) ]:
                for a in [ tgfn, zgfn ]:
                    fullname = os.path.join(d, a)
                    if os.path.isfile(fullname):
                        foundarchive = True
                        tar_modified_time = os.stat(fullname).st_mtime
                        if base_time > tar_modified_time:
                            if args.verbose:
                                print "** Gerber Archive is older than CAD files\n"
                            needed = True

            if not foundarchive:
                if args.verbose:
                    print "** Gerber Archive not found\n"
                needed = True

        if b.endswith('.brd'):
            (bfile, ext) = os.path.splitext(b)
        else:
            bfile = b

        FileList = genGerberFilenameList(bfile)

        if not needed:
            continue

        modified = True

        # clean out old, derived files so EagleCad doesn't ask to overwrite them
        for n,f in FileList.iteritems():
            if os.path.isfile(f):
                os.remove(f)

        # explicitly run EagleCAD CAM jobs to create the needed PCB Fab files
        #
        # These files, zipped together, are the only files you need to have a PCB made at nearly any fab house.

        # Copper layers
        callCommand(args, FileList['GTL'], board, GENGERBER, 'Dimension Top     Pads Vias')
        callCommand(args, FileList['GBL'], board, GENGERBER, 'Dimension Bottom  Pads Vias')

        # Solder Mask
        callCommand(args, FileList['GTS'], board, GENGERBER, 'Dimension tStop')
        callCommand(args, FileList['GBS'], board, GENGERBER, 'Dimension bStop')

        # Solder Paste
        callCommand(args, FileList['GTP'], board, GENGERBER, 'Dimension tCream')
        callCommand(args, FileList['GBP'], board, GENGERBER, 'Dimension bCream')

        # Board Outline and Milling instructions
        callCommand(args, FileList['GML'], board, GENGERBER, 'Dimension Milling')

        # Drills and holes
        callCommand(args, FileList['TXT'], board, GENDRILLS, 'Dimension Drills Holes')

        # Silk Screen layers
        if b == board :	# singleton
            callCommand(args, FileList['GTO'], board, GENGERBER, 'Dimension tPlace Document tDocu tNames')
            callCommand(args, FileList['GBO'], board, GENGERBER, 'Dimension bplace          bDocu bNames')
        else: # boardArray
            callCommand(args, FileList['GTO'], board, GENGERBER, 'Dimension tPlace Document tDocu 125')
            callCommand(args, FileList['GBO'], board, GENGERBER, 'Dimension bplace          bDocu 126')

        # now, make archives of the CAM files and the gerbers we just generated
        if not args.tar:
            if args.verbose:
                print('Archive: Zip: {}'.format(zgfn))
            with ZipFile(zgfn, 'w') as zip:
                for n, f in FileList.iteritems():
                    if os.path.isfile(f):
                        if args.verbose:
                            print('\t{}'.format(f))
                        zip.write(f)

            if args.verbose:
                print('Archive: Zip: {}'.format(zefn))
            with ZipFile(zefn, 'w') as zip:
                for f in [schematic, board, boardArray]:
                    if os.path.isfile(f):
                        if args.verbose:
                            print('\t{}'.format(f))
                        zip.write(f)
        else:
            if args.verbose:
                print('Archive: Tar: {}'.format(tgfn))
            with tarfile.open(tgfn, 'w') as tar:
                for n, f in FileList.iteritems():
                    if os.path.isfile(f):
                        if args.verbose:
                            print('\t{}'.format(f))
                        tar.add(f)

            if args.verbose:
                print('Archive: Tar: {}'.format(tefn))
            with tarfile.open(tefn, 'w') as tar:
                for f in [schematic, board, boardArray]:
                    if os.path.isfile(f):
                        if args.verbose:
                            print('\t{}'.format(f))
                        tar.add(f)

    return modified


def generateImagesFromEagle(args):
    blist = genBoardFilenameList(args)

    board      = blist['board']
    boardArray = blist['boardArray']
    schematic  = blist['schematic']
    partsfile  = blist['partsfile']
    pngsch     = blist['pngsch']
    pngbrd     = blist['pngbrd']
    pngbot     = blist['pngbot']
    pngtop     = blist['pngtop']

    modified = False

    genparts   = PARTS_SCH.format(partsfile)

    # EagleCAD commands
    IMAGE_SCH  ="SET PALETTE WHITE; DISPLAY {layer};                    EXPORT image {png} 300".format(layer=D_SCHEMATIC, png=pngsch)
    IMAGE_BOARD="SET PALETTE WHITE; DISPLAY {layer}; RATSNEST; RIPUP @; EXPORT image {png} 300".format(layer=D_NORMAL,    png=pngbrd)
    IMAGE_BSILK="SET PALETTE WHITE; DISPLAY {layer}; RATSNEST;          EXPORT image {png} 300".format(layer=D_BSILK,     png=pngbot)
    IMAGE_TSILK="SET PALETTE WHITE; DISPLAY {layer}; RATSNEST;          EXPORT image {png} 300".format(layer=D_TSILK,     png=pngtop)

    FileList = [pngsch, pngbrd, pngtop, pngbot]

    needed = False
    base_time = None

    if args.force:
        needed = True
        if args.verbose:
            print "** FORCE {}\n".format(args.project)

    if not needed:
        for f in FileList:
            if not os.path.isfile(f):
                if args.verbose:
                    print "** Need to generate {}".format(f)
                needed = True
            else:
                if base_time is None or base_time > os.stat(f).st_mtime:
                    base_time = os.stat(f).st_mtime

    if os.path.isfile(schematic):
        if needed or base_time < os.stat(schematic).st_mtime:
            modified = True
            for f in [pngsch, blist['partsfile'] ]:
                if os.path.isfile(f):
                    os.remove(f)
            ECMD="SET CONFIRM OFF;{};undo;{};undo;quit;"
            ECMD=ECMD.format(IMAGE_SCH, genparts)

            os.system("{EAGLE} -C \"{cmd}\" {file}".format(EAGLE=EAGLEAPP, cmd=ECMD, file=schematic))

    for b in [board, boardArray]:
        if not os.path.isfile(b):
            continue;
        if os.path.isfile(b):
            if needed or base_time < os.stat(b).st_mtime:
                modified = True
                for f in [ pngbrd, pngbot, pngtop ]:
                    if os.path.isfile(f):
                        os.remove(f)
                ECMD="SET CONFIRM OFF;{};undo;{};undo;{};undo;{};undo;quit;"
                ECMD=ECMD.format(PARTS_BOARD, IMAGE_BOARD, IMAGE_BSILK,IMAGE_TSILK)

                os.system("{EAGLE} -C \"{cmd}\" {board}".format(EAGLE=EAGLEAPP, cmd=ECMD, board=b))
    return modified


def generate_DESCRIPTION(args):
    if not os.path.isfile("DESCRIPTION"):
        f = open("DESCRIPTION", "w")
        f.write("{}\n\n".format(args.project))
        f.close()

def isNeeded(file, base_time):
    if os.path.isfile(file):
        modified_time = os.stat(file).st_mtime
        return base_time > modified_time
    return True


def generateFabFiles(args):
    def callCommand(args, command, board):
        command = "python {COMMAND} --feederfile=/tmp/PnP-feeders {BOARD}".format(COMMAND=command, BOARD=board)
        if args.verbose:
            print('% {}'.format(command))
        os.system(command)

    blist = genBoardFilenameList(args)

    board      = blist['board']
    schematic  = blist['schematic']
    boardArray = blist['boardArray']

    if not os.path.isfile(board):
        if not os.path.isfile(boardArray):
            s='# ERROR: Can not create fab files without a brd file ({} or {})...'.format(board, boardArray)
            raise Exception(s)

    for b in [board, boardArray]:
        if not os.path.isfile(b):
            continue;
        base_time = getCADtime(schematic, b)

        if isNeeded(blist['dpv'], base_time):
            callCommand(args, eagle2chmt, b)
        if isNeeded(blist['svg'], base_time):
            callCommand(args, eagle2svg,  b)
        if isNeeded(blist['bom'], base_time):
            callCommand(args, eagle2bom,  b)

def generateArchive(args):
    DATE       = datetime.datetime.today().strftime('%F-%T')
    GERBERDIR  = 'Gerbers.{}.{}'.format(args.project, DATE)

    l = os.path.join(ARCHIVEDIR, ALINK)
    d = os.path.join(ARCHIVEDIR, GERBERDIR)

    if not os.path.isdir(ARCHIVEDIR):
        if args.verbose:
            print('mkdir {}'.format(ARCHIVEDIR))
        os.mkdir(ARCHIVEDIR, 0o755)

    if os.path.islink(l):
        if args.verbose:
            print('rm {}'.format(l))
        os.remove(l)

    if args.verbose:
        print('mkdir {}'.format(d))
    os.mkdir(d, 0o755)

    if args.verbose:
        print('ln -s {} {}'.format(GERBERDIR, l))
    os.symlink(GERBERDIR, l)

    for dict in [ genEagleFilenameList(args),
               genArchivesFileList(args),
               genDerivedFileList(args) ]:
        for n, f in dict.iteritems():
            if os.path.isfile(f):
                if args.verbose:
                    print('cp {} {}'.format(f, d))
                shutil.copy(f, d)

    for n, f in genGerberFilenameList(args.project).iteritems():
        if os.path.isfile(f):
            if args.verbose:
                print('rm {} {}'.format(f, d))
            os.remove(f)

"""
main()

usage: eagle2CAM.py [-h] [--noarchive] [--picknplace] [--order]
                    [--directory DIRECTORY] [--tar] [--leave] [--verbose]
                    [--force] [--project PROJECT]

optional arguments:
  -h, --help            show this help message and exit
  --noarchive, -n       Do not archive CAD files (default is to archive)
  --picknplace, -p      Generate Pick and Place .dpv files for CharmHigh
  --order, -o           copy gerber archive to orders directory
  --directory DIRECTORY, -D DIRECTORY
                        orders directory (default is
                        /Users/plocher/Dropbox/eagle/Seeed-
                        Orders/CurrentOrder)
  --tar, -t             create tar file for gerbers (default is zip)
  --leave, -l           Do not clean up unneeded files (default is to clean)
  --verbose, -v         Verbose flag
  --force, -f           Force rebuild flag
  --project PROJECT, -P PROJECT
                        Project name

"""

somethingChanged = False

parser = argparse.ArgumentParser()
parser.add_argument('--noarchive', '-n',  action='store_true', help='Do not archive CAD files (default is to archive)')
parser.add_argument('--picknplace','-p',  action='store_true', help='Generate Pick and Place .dpv files for CharmHigh')
parser.add_argument('--order',     '-o',  action='store_true', help='copy gerber archive to orders directory')
parser.add_argument('--directory', '-D', help='orders directory (default is {})'.format(DefaultOrdersDirectory))
parser.add_argument('--tar',       '-t',  action='store_true', help='create tar file for gerbers (default is zip)')
parser.add_argument('--leave',     '-l',  action='store_true', help='Do not clean up unneeded files (default is to clean)')
parser.add_argument('--verbose',   '-v',  action='store_true', help='Verbose flag')
parser.add_argument('--force',     '-f',  action='store_true', help='Force rebuild flag')
parser.add_argument('--project',   '-P',                       help='Project name')

args = parser.parse_args()

generate_DESCRIPTION(args)
somethingChanged |= generateImagesFromEagle(args)
somethingChanged |= generateGerbersFromEagle(args)

generateFabFiles(args)

if somethingChanged and not args.noarchive: # == default is to archive things...
    generateArchive(args)

if somethingChanged and args.order:
    d = DefaultOrdersDirectory
    if args.directory and os.path.exists(args.directory):
        d = args.directory
    if not os.path.exists(d):
        print "** Orders directory '{}' does not exist!\n".format(d)
    else:
        print 'TODO: Order stuff'
        pass
        # copy Gerbers ZIP/TAR to d

if not args.leave:
    # get rid of unnecessary files
    for f in [ "GBP", "job", "dri", "gpi", "pro",
               "b##", "b#1", "b#2", "b#3", "b#4", "b#5", "b#6", "b#7", "b#8", "b#9",
               "s##", "s#1", "s#2", "s#3", "s#4", "s#5", "s#6", "s#7", "s#8", "s#9" ]:
        fn = "{NAME}.{EXT}".format(NAME=args.project, EXT=f)
        if os.path.isfile(fn):
            if args.verbose:
                print('rm {}'.format(fn))
            os.remove(fn)

